example$name[pick_allowanceOver1000]
levels(example$allowance)
print(example[c("name","allowance")])
levels(example$allowance)
example$allowance<- ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
print(example[c("name","allowance")])
print(example[c("name","allowance")])
levels(example$allowance)
example$allowance<- ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
factor(
example$allowance,
levels=c("0-1000", "1001-2000", "2000+"),
ordered = T # 設定為可排序factor
)
example$allowance <-
factor(
example$allowance,
levels=c("0-1000", "1001-2000", "2000+"),
ordered = T # 設定為可排序factor
)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T)
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
list_victimAges_female$數目 <-
as.integer(list_victimAges_female$數目)
list_victimAges_female$年齡層 <-
as.factor(list_victimAges_female$年齡層)
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$年齡層) <- levels_new
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
list_victimAges_female$`數目` <-
as.integer(list_victimAges_female$`數目`)
list_victimAges_female$`年齡層` <-
as.factor(list_victimAges_female$`年齡層`)
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$`年齡層`) <- levels_new
print(levels_new)
install.packages("stringr")
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(glue)
c(
"https://github.com/student1/108-2-78-inclass-practice",
"github.com/student2 / 108-2-56-inclass-practice",
"https://github.com/student3/108-2-56-inclass-practice",
"student4 / 108-2-56-inclass-practice",
"student5"
) -> studentGithubURLs
str_detect(
studentGithubURLs,
(?<="https://github.com/")[alnum](?="(/108-2-78-inclass-practice|/108-2-56-inclass-practice)")
library(stringr)
library(glue)
ahead <- "https://github.com/"
back <- "(/108-2-78-inclass-practice|/108-2-56-inclass-practice)"
str_detect(
studentGithubURLs,
(?<=ahead)[alnum](?=back)
target_regex <-
"^https://github.com/[:graph:]+/108-2-(56|78)-inclass-practice"
str_detect(
studentGithubURLs, target_regex
)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
midtermFilename <- c(midtermFilename,"exam149975013.Rmd","499770121stExam.Rmd")
midtermFilename <- c(midtermFilename,"exam149975013.Rmd","499770121stExam.Rmd")
midtermFilename <-
c("exam1-410773888.rmd",
"exam1410882888.Rmd",
"410682999第一次期中考.Rmd",
"期中考310573888.R")
# 1.
pattern <- "[43][0-9]{8}"
str_extract(midtermFilename,pattern)
# 2.
target_regex <- "[0-9]{2}"
A_regex <- "[43](107|108|106|105)"
pattern <- glue::glue("(?<={A_regex}){target_regex}")
str_extract(midtermFilename, pattern)
# 3.
midtermFilename <- c(
midtermFilename, "exam149975013.Rmd","499770121stExam.Rmd"
)
# 3.1
pattern <- "[43](99|107|108|106|105)[0-9]{5}"
str_extract(midtermFilename,pattern)
# 3.2
## target pattern: 2位數字
target_regex <- "[0-9]{2}"
## target location: 前面鄰居 4或3,接99,105-108
A_regex <- "[43](99|107|108|106|105)"
pattern <- glue::glue(
"(?<={A_regex}){target_regex}"
)
pattern
str_extract(midtermFilename,pattern)
knitr::opts_chunk$set(echo = TRUE)
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
library(stringr)
library(glue)
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
View(population)
unlist(population) -> population
population
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
View(covid19)
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
install.packages("purrr")
library(purrr)
map(dance, ~.x$title) ->
list_titles
View(list_titles)
View(dance)
View(dance)
map(dance[[8]]$showInfo, ~.x$time)
map(dance[[8]]$showInfo, ~.x$location)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement, ~max(.x$time[[1]]$parameter$parameterValue)) #這段時間的最高氣溫
knitr::opts_chunk$set(echo = TRUE)
supply <- function(p){
q_s <- 0+2*p
return(q_s)
}
supply(5)
library(lubridate)
now()
now_time <- now()
?ymd_hms
now_time <- now()
what_time_it_is <- function(now_time){
parisnow <- ymd_hms(now_time,tz="Europe/Paris")
return(parisnow)
}
now_time <- now()
what_time_it_is <- function(now_time){
parisnow <- ymd_hms(now_time,tz="Europe/Paris")
return(parisnow)
}
what_time_it_is(now_time)
now()
what_time_it_is <- function(now_time){
parisnow <- ymd_hms(now_time,tz="Europe/Paris")
return(parisnow)
}
what_time_it_is(now_time)
what_time_it_is(now())
what_time_it_is <- function(now_time){
parisnow <- ymd_hms(now_time,tz="Europe/Paris")
return(parisnow)
}
what_time_it_is(now())
what_time_it_is <- function(now_time){
parisnow <- with_tz(now_time,tzone="Europe/Paris")
return(parisnow)
}
what_time_it_is(now())
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busArrivalForecast)
View(busRoutes)
View(busRoutes)
ok <- list(first=c(1,2,2,1),
second=c(3,4,5,5)
)
str(ok)
ok <- list(first=c(1,2,2,1),
second=c(3,4,5,5)
)
okpick <- ok$first == 2 & ok$second == 4
when_busArrives <- function(busnumber,where){
busRoutes$nameEn =="busnamber" -> pickname
busRoutes$Id[pickname] -> routesidp
busStopsInfo$nameZh == "where" -> pickwhere
busStopsInfo$Id[pickwhere] -> stopid
infopick <-
busArrivalForecast$RouteID =="routesidp" &
busArrivalForecast$StopID == "stopidp"
when <- busArrivalForecast$EstimateTime[[infopick]]
return(when)
}
when_busArrives("916","臺北大學正門")
when_busArrives <- function(busnumber,where){
busRoutes$nameEn =="busnamber" -> pickname
busRoutes$Id[pickname] -> routesidp
busStopsInfo$nameZh == "where" -> pickwhere
busStopsInfo$Id[pickwhere] -> stopid
infopick <-
busArrivalForecast$RouteID =="routesidp" &
busArrivalForecast$StopID == "stopidp"
when <- busArrivalForecast$EstimateTime[infopick]
return(when)
}
when_busArrives("916","臺北大學正門")
busRoutes$nameEn =="busnamber" -> pickname
busRoutes$Id[pickname] -> routesidp
busStopsInfo$nameZh == "where" -> pickwhere
busStopsInfo$Id[pickwhere] -> stopid
infopick <-
busArrivalForecast$RouteID =="routesidp" &
busArrivalForecast$StopID == "stopidp"
pickname
when_busArrives <- function(busnumber,where){
busRoutes$nameEn =="busnamber" -> pickname
busRoutes$Id[pickname] -> routesidp
busStopsInfo$nameZh == "where" -> pickwhere
busStopsInfo$Id[pickwhere] -> stopidp
infopick <-
busArrivalForecast$RouteID =="routesidp" &
busArrivalForecast$StopID == "stopidp"
when <- busArrivalForecast$EstimateTime[infopick]
return(when)
}
when_busArrives("916","臺北大學正門")
pickwhere
when_busArrives <- function(busnumber,where){
busRoutes$nameEn =="busnamber" -> pickname
busRoutes$Id[pickname] -> routesidp
busStopsInfo$nameZh == "where" -> pickwhere
busStopsInfo$Id[pickwhere] -> stopidp
infopick <-
busArrivalForecast$RouteID =="routesidp" &
busArrivalForecast$StopID == "stopidp"
when <- busArrivalForecast$EstimateTime[infopick]
return(when)
}
when_busArrives("855","新莊高中")
busRoutes$Id == 16663
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
when_busArrives <- function(busnumber,where){
busRoutes$nameEn =="busnamber" -> pickname
busRoutes$Id[pickname] -> routesidp
busStopsInfo$nameZh == "where" -> pickwhere
busStopsInfo$Id[pickwhere] -> stopidp
infopick <-
busArrivalForecast$RouteID =="routesidp" &
busArrivalForecast$StopID == "stopidp"
when <- busArrivalForecast$EstimateTime[infopick]
return(when)
}
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(magrittr)
GET("https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/NewTaipei/916?$top=30&$format=JSON") %>%
content -> estimatedArrivalTime_916
GET("https://ptx.transportdata.tw/MOTC/v2/Bus/Route/City/NewTaipei/939?$top=30&$format=JSON") %>%
content -> route_916
View(route_916)
when_busArrives("916","臺北大學正門")
knitr::opts_chunk$set(echo = TRUE)
check_package <-
if(!require(pkgName)){
install.packages("pkgName")
}
# 測試
check_package("clipr")
check_package <-
function(pkgName){
if(!require(pkgName)){install.packages("pkgName")}
}
# 測試
check_package("clipr")
check_package("SOAR")
check_package(pkgName) <-
function(pkgName){
if(!require(pkgName)){install.packages("pkgName")}
}
check_package <-
function("pkgName"){
check_package <-
function(pkgName){
if(!require(pkgName)){install.packages("pkgName")}
}
# 測試
check_package("clipr")
check_package("SOAR")
View(check_package)
check_package <-
function(pkgName){
if(!require("pkgName")){install.packages("pkgName")}
}
# 測試
check_package("clipr")
check_package("SOAR")
check_package <-
function(pkgName){
if(!require("pkgName")){install.packages()}
}
# 測試
check_package("clipr")
check_package("SOAR")
check_package <-
function(pkgName){
if(!require("pkgName")){install.packages(.)}
}
# 測試
check_package("clipr")
check_package("SOAR")
require("clipr")
!require("clipr")
check_package <-
function(pkgName){
!require("pkgName") -> tf
if(tf,negate=T)){install.packages(pkgName)}
check_package <-
function(pkgName){
!require("pkgName") -> tf
if(tf,negate=T){install.packages(pkgName)}
check_package <-
function(pkgName){
!require("pkgName") -> tf
if(tf){install.packages(pkgName)}
}
# 測試
check_package("clipr")
check_package("SOAR")
install.packages(pkgName)
knitr::opts_chunk$set(echo = TRUE)
check_package <-
function(pkgName){
!require("pkgName") -> tf
if(tf){install.packages("pkgName")}
}
# 測試
check_package("clipr")
check_package("SOAR")
check_package <-
function(pkgName){
!require(pkgName) -> tf
if(tf){install.packages(pkgName)}
}
# 測試
check_package("clipr")
check_package("SOAR")
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
a <- c(1,2,3)
cut(a, c(1,2,3))
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
(20*10+20*15+10*15)*2 -> surface_A
# surface_A
surface_cube <- function(x,y,z){
(x*y+x*z+y*z)*2 %>%
return()
}
# surface_cube
surface_cube <- function(x,y,z){
(x*y+x*z+y*z)*2 %>%
return()
}
# surface_cube
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
Mask$身分證字號[[1]] %>%
str_sub(-1) %>%
as.integer() %% 2 -> `1st_odd_or_even`
# `1st_odd_or_even`
`1st_odd_or_even`
odd_or_even <- function(id){
id[[1]] %>%
str_sub(-1) %>%
as.integer() %% 2 %>%
return()
}
# odd_or_even
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses <- function(entranceYear,major){
entranceYear <- as.character(entranceYear)
if(!exists("courseStructure")){
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
SOAR::Store(courseStructure)
}
library(dplyr)
library(stringr)
library(purrr)
paste0(major,1:4) -> majorAllGrades
map(majorAllGrades,
~(
courseStructure$學年 == entranceYear &
str_detect(courseStructure$應修系級, .x))
) -> pick_courses
map(pick_courses,
~unique(courseStructure$科目名稱[.x])) -> courseNamesAllGrades
names(courseNamesAllGrades) <- paste("year", 1:4, sep="")
return(courseNamesAllGrades)
}
entranceYear <- "103"
major <- "經濟系"
get_courses(entranceYear, major)
# get_courses
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[2]])) ->
list_major2_allYears # 社會系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社工系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[3]])) ->
list_major3_allYears # 社工系
get_coursesAllYears <- function(entranceYears, major){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, major)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
list_entranceYears <- 100:103
map(list_entranceYears,
get_courses, major) -> list_coursesAllEntranceYears
list_coursesAllEntranceYears[[1]] %>% map(~length(.x))
map(list_coursesAllEntranceYears, ~.x  %>% map(~length(.x)) ) -> list_coursesCount
list_coursesCount %>% map( ~.x$year1) %>% unlist -> year1
get_numberOfYear <- function(i){
list_coursesCount %>% map( ~.x[[i]]) %>% unlist -> year1
return(year1)
}
map(1:4, get_numberOfYear) -> list_coursesCountAllYears
names(list_coursesCountAllYears) <- paste0("year", 1:4, sep="")
list(
entranceYear=100:103
) %>% append(list_coursesCountAllYears) -> list_econCourseCounts
# list_econCourseCounts
list_econCourseCounts
